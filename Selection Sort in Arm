  .global SelectionSort
  .data
  .text
  SelectionSort:
  mov   r12,r13		// save stack pointer into register r12
  sub   sp,#32		// reserve 32 bytes of space for local variables 
  push  {lr}		// push link register onto stack -- make sure you pop it out before you return 
      
//Initialization
  mov r4, #4 
    mul r1, r4
    mov r3, #0
      ldrb r5, [r0, r3]
      ldrb r6, [r0, r4]
      cmp r5, r6
      bge swap
      cmp r5, r6
      ble outerloop
//Arm Swap function
      swap:
        strb r5, [r0, r4]
        strb r6, [r0, r3]
        b outerloop
//Iterate through the array, while keeping a placeholder so that way we make sure every element has been compared
     outerloop:
     add r4, r4, #4
      cmp r4, r1
      bge innerloop
      ldrb r5, [r0, r3]
      ldrb r6, [r0, r4]
      cmp r5, r6
      bge swap1
      cmp r5, r6
      ble outerloop

      swap1:
        strb r5, [r0, r4]
        strb r6, [r0, r3]
        b outerloop

      innerloop:
        add r3, r3, #4
        cmp r3, r1
        bge finishsort
        mov r4, #0
        b outerloop
        
//This is just a double check, just in case the first and last elements were not double checked
      finishsort:
        mov r4, r1
        sub r1, r1, #4
        mov r3, r1
        ldrb r2, [r0, r4]
        ldrb r5, [r0, r3]
        cmp r2, r5
        bge finish
        strb r5, [r0, r4]
        strb r2, [r0, r3]
        b finish
        
       
      finish :

  pop {lr}			// pop link register from stack 
  mov sp,r12		// restore the stack pointer -- Please note stack pointer should be equal to the 
					// value it had when you entered the function .  
  mov pc,lr			// return from the function by copying link register into  program counter

